

algorithm01_day01

1.选择排序


    public static int[] selectionSort(int[]arr){
        if(arr == null || arr.length < 2){
            return arr;
        }
        for(int i = 0;i < arr.length - 1;i++){
            int minIndex = i;
            for(int j = i + 1;j < arr.length;j++){      //循环一次找到最小值下标
                //若当前数小于minIndex所记录的数，则更新最小值下标
                minIndex = arr[j] < arr[minIndex] ? j : minIndex;
            }
            swap(arr,i,minIndex);                       //将记录的最小值的下标，进行交换，完成一次选择排序
        }
        return arr;
    }



2. 冒泡排序


    public static int[] bubbleSort(int[] arr) {
        if(arr == null || arr.length < 2){
            return arr;
        }
        for(int i = arr.length-1;i > 0;i--){        //每次冒泡一次，从 0-n-1 减小一次
            for(int j = 0;j < i;j++){
                if(arr[j] > arr[j+1]){              //每次把大的数往后冒泡
                    swap(arr,j,j+1);
                }
            }
        }
        return arr;
    }




3. 异或运算  ： 相同为0，不同为1



			1 ^ 0 = 1
			0 ^ 1 = 1

			1 ^ 1 = 0
			0 ^ 0 = 0


		1.	异或运算可以理解为无进位相加


		2.	异或运算满足交换，结合，且与异或的先后顺序无关

		3.  两数a,b进行交换，可以采用 异或的方式


			前提条件：a , b在内存空间中地址不同


			数组中使用，前提条件，arr[i] != arr[j]




3.1  数组中有 一种数出现奇数次，其他数出现偶数次，找出出现奇数次的数 ？


		将数组中的数全部进行一边异或操作，偶数次的数异或完得到0，最终只剩下出现奇数次的数


		例：  123211313  等价于  1111 22 333	0 0 3


		//使用异或运算得到，数组中唯一出现一次的奇数次数字
		public static void odd_one(int[]arr){
			int eor = 0;
			for (int i : arr) {
				eor ^= i;
			}
			System.out.println("出现奇数次的数为：" + eor);
		}




3.2  数组中有 两种数出现奇数次，其他数出现偶数次，找出出现奇数次的两个数ab ？



	1.首先将数组中的数全部异或一遍，得到 a ^ b

	2，因为 eor = a ^ b 不等于0，可知a b 两个数在二进制某一位上一定不相同

		因此可以将数分为两部分，一个是某一位上为1的数，一个是某一位上不为1的数

	3. 选择 a ^ b的最右边的1  ：  int rightOne = eor & ( ~eor + 1 )

	4.将 rightone与位数为1(或者位数为0)的数全部异或，则得到 a或者b中的某个数




		public static void odd_two(int[]arr){
			int eor = 0;
			for (int i : arr) {
				eor ^= i;           //得到 eor = a ^ b      a ,b 在某一位上一定不相同
			}

			int rightOne = eor & (~eor + 1);     //取出最右的 1			0000000010000000

			int onlyOne = 0;
			for (int i : arr) {
				if((rightOne & i) == 0){        //将某位数为0的数全部进行异或
					onlyOne ^= i;
				}
			}
			System.out.println(onlyOne + " " + (eor ^ onlyOne));
		}





4.  插入排序


		每一次都将当前所遍历到的数和前面有序的数进行比较



		public static int[] insertSort(int[] arr) {
			if(arr == null || arr.length < 2){
				return arr;
			}

			for (int i = 1; i < arr.length; i++) {  //每一次都将当前index 和前面有序的数进行比较
				for (int j = i-1; j >= 0 && arr[j] > arr[j+1] ; j--) {   //当 j >=0 并且 当前的数要比有序数组中的数要小，才循环
						swap(arr,j,j+1);
				}
			}
			return arr;
		}






5.二分法 详解与二分法的扩展


	5.1  有序数组中，找出某个数是否存在



			采用二分法：

				1.从数组的两端开始，left=0  right=arr.length-1、

				2.mid = left + (right-left) / 2

				3.判断mid和target的大小：

					若 arr[mid] == target: 	 找到target，返回结果
					若 arr[mid] > target :   目标在左侧，缩小右边界, right = mid - 1;
					若 arr[mid] < target :   目标在右侧，增大左边界，left = mid + 1




			代码：

				public static boolean binarySearch(int[]arr,int target){
					if(arr == null || arr.length == 0){
						return false;
					}
					int left = 0,right = arr.length-1;
					int mid = 0;
					while(left < right){
						mid = left + (right - left) / 2;
						if(arr[mid] == target){
							return true;
						}else if(arr[mid] > target){	//目标在左侧
							right = mid - 1;
						}else{
							left = mid + 1;				//目标在右侧
						}
					}
					return false;
				}






	5.2  在一个有序数组中，找 >= 某个数最左侧的位置



			11122233334444555

			1.当二分查找mid等于target时，此时可能还有更左侧的位置：

				index = mid
				right = mid - 1

			2.继续进行二分



			代码：

				public static int binarySearch_left(int[]arr,int target){
					if(arr == null || arr.length == 0){
						return -1;
					}
					int left = 0,right = arr.length-1,mid=0;
					int index = 0;
					while(left < right){
						mid = left + (right-left) / 2;
						if(arr[mid] == target){     //此时 arr[mid] == target,可能还有更左侧的位置
							index = mid;
							right = mid - 1;
						}else{
							left = mid + 1;
						}
					}
					return index;
				}






	5.3 局部最小值 问题



		  mid 左侧某个数left 比 mid 大
		  mid 右侧某个数right 比 mid 大


		  则在left和right之间，一定存在某个局部最小值，可以使用二分查找









algorithm01_day02




1. 归并排序


		基本思想：

			1.将左边数组排好序
			2.将右边数组排好序
			3.合并两个数组


		merge过程：

			当a <= mid && b < r时：说明数组指针未越界

				1.若 arr[a] > arr[b] :将b所指的数字存入result数组中,b++
				2.若 arr[a] < arr[b] :将a所指的数字存入result数组中,a++
				3.若A B 两数组有一个数组已经走完，直接把另一个数组的值存入result中


		代码：

			public static void main(String[] args) {
				int []sort = {2,222,44,520,0,6666,5,666,88};
				mergeSort(sort,0,sort.length-1);
				for (int i : sort) {
					System.out.println(i);
				}
			}

			private static void mergeSort(int[] arr, int left, int right) {
				if(left == right) return;       	//递归结束条件
				int mid = left + (right-left) / 2;
													//递归：先对左边进行排序，再对右边进行排序，最后合并数组
				mergeSort(arr,0,mid);
				mergeSort(arr,mid+1,right);
				merge(arr,left,mid,right);

			}

			private static void merge(int[] arr, int left, int mid, int right) {           //完成 left-right区间上一次 merge过程
				int[] help = new int[right-left+1];     	 //创建与合并数组同长度的数组
				int len = 0,p1 = left,p2= mid + 1;      	 //left,right与传入的参数有关
				while(p1 <= mid && p2 <= right){        	 //两个数组均未走完
					help[len++] = arr[p1] > arr[p2] ? arr[p2++] : arr[p1++];
				}
				while(p1 <= mid){                       	 //p1剩余
					help[len++] = arr[p1++];
				}
				while(p2 <= right){
					help[len++] = arr[p2++];            	 //p2未剩余
				}
				for (int i = 0; i < help.length; i++) {
					arr[left+i] = help[i];
				}
			}















2. 归并排序的扩展


	小和问题和逆序对问题：

		小和问题：

			在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组 的小和。

			例子:[1,3,4,2,5] 1左边比1小的数，没有; 3左边比3小的数，1; 4左
			边比4小的数，1、3; 2左边比2小的数，1; 5左边比5小的数，1、3、4、2; 所以小和为1+1+3+1+1+3+4+2=16


		逆序对问题：

			在一个数组中，左边的数如果比右边的数大，则折两个数构成一个逆序对，请打印所有逆序对。




		public static void main(String[] args) {
			int []sort = {1,3,4,2,5};
			int result = mergeSort(sort,0,sort.length-1);
			System.out.println(result);
		}

		private static int mergeSort(int[] arr, int left, int right) {  //递归归并算法
			if(left ==  right) return 0;
			int mid = left + (right-left) / 2;          //res = 左边数组 + 右边数组 + merge合并
			return mergeSort(arr,left,mid) + mergeSort(arr,mid+1,right) + merge(arr,left,mid,right);
		}

		private static int merge(int[] arr, int left, int mid, int right) {
			int[] help = new int[right-left+1];
			int len = 0,p1 = left,p2 = mid + 1;
			int res = 0;
			while(p1 <= mid && p2 <= right){
				res += arr[p1] < arr[p2] ? (right-p2+1) * arr[p1] : 0;          //计算出当前合并时，右边总共有多少个比当前数大的数字
				help[len++] = arr[p1] < arr[p2] ? arr[p1++] : arr[p2++];        //当两个数相等时，默认先合并右边数组的数
			}
			while(p1 <= mid){
				help[len++] = arr[p1++];
			}
			while(p2 <= right){
				help[len++] = arr[p2++];
			}
			for (int i = 0; i < help.length; i++) {
				arr[left + i] = help[i];
			}
			return res;
		}










3. 荷兰国旗问题


问题一
		给定一个数组arr，和一个数num，请把小于等于 num的数放在数组的左边，大于num的数放在数组的右边。  要求额外空间复杂度O(1)，时间复杂度O(N)

		i   leftIndex

		1.用一个指针i遍历整个数组
		2.将数组分为两部分，小于等于num的部分和当前未遍历的部分
		3.当 i <= num 时，将当前数字和 <= num后一个数字进行交换








问题二(荷兰国旗问题)

		给定一个数组arr，和一个数num，请把小于num的数放在数组的左边，等于num的数放在数组的中间，大于num的数放在数组的右边。

		要求额外空间复杂度O(1)，时间复杂度O(N)


			i  leftIndex  rightIndex

		1.当 cur < num 时：和左边界后一个数字进行交换,i++
		2.当 cur = num 时：i++
		3.当 cur > num 时：和右边界前一个数字进行交换，此时 i 不变




			private static int[] partition(int[] arr,int l,int r,int target) {
				int left = l - 1;
				int right = r + 1 ;
				while(l < right){
					if(arr[l] < target){                //当前 num < target: 和left后一个进行交换,l++
						swap(arr,++left,l++);
					}else if(arr[l] > target){          //当前 num > target: 和right前一个进行交换,此时 l 不变
						swap(arr,--right,l);
					}else{
						l++;                            //num == target ,si++
					}
				}
				return new int[]{left+1,right-1};         //返回相等部分前后的下标
			}









4. 快速排序




不改进的快速排序


		1）把数组范围中的最后一个数作为划分值，然后把数组通过荷兰国旗问题分成三个部分：

			左侧<划分值、中间==划分值、右侧>划分值


		2）对左侧范围和右侧范围，递归执行
			分析
			1）划分值越靠近两侧，复杂度越高；划分值越靠近中间，复杂度越低
			2）可以轻而易举的举出最差的例子，所以不改进的快速排序时间复杂度为O(N^2)








随机快速排序（改进的快速排序）

		1）在数组范围中，等概率随机选一个数作为划分值，然后把数组通过荷兰国旗问题分成三个部分：

				左侧<划分值、中间==划分值、右侧>划分值

		2）对左侧范围和右侧范围，递归执行

		3）时间复杂度为O(N*logN)














algorithm01_03




	堆

	1.堆结构就是用数组实现的完全二叉树结构

	2.完全二叉树中如果每棵子树的最大值都在顶部就是大根堆

	3.完全二叉树中如果每棵子树的最小值都在顶部就是小根堆

	4.堆结构的 heapInsert与 heapify操作

	5.堆结构的增大和减少

	6.优先级队列结构，就是堆结构





1. 堆排序



堆排序


	1.先让整个数组都变成大根堆结构,保证堆顶从上往下都为递减趋势

		1)从上到下的方法，时间复杂度为O(N*logN)
		2)从下到上的方法，时间复杂度为O(N)

	2.把堆的最大值和堆末尾的值交换，然后减少堆的大小之后，再去调整堆，一直周而复始，时间复杂度为O(N*logN)

	3.堆的大小减小成0之后，排序完成




	父节点： (index-1) / 2
	左孩子：（index*2）+ 1
	右孩子：（index*2）+ 2


	heapInsert()		初始建堆过程，保证堆顶从上往下都为递减趋势
	heapify()			维护大根堆







			public static void heapSort(int[] arr) {
				if (arr == null || arr.length < 2) {
					return;
				}
				for (int i = 0; i < arr.length; i++) {      //自顶向上初始化大根堆
					heapInsert(arr, i);
				}
		//      for (int i = arr.length-1; i >= 0; i--) {   //自底向上初始化大根堆
		//          heapify(arr,i,arr.length);
		//      }

				int size = arr.length;
				swap(arr,0,--size);                              //移除大根堆堆顶，大根堆顶和最后一个元素进行交换
				while(size > 0){
					heapify(arr,0,size);                      //维护大根堆
					swap(arr,0,--size);                          //移除一次大根堆堆顶，继续维护
				}
			}

			//维护大根堆
			private static void heapify(int[] arr, int index, int size) {
				int left = (index * 2) + 1;
				while(left < size){
					int largest = left + 1 < size && arr[left + 1] > arr[left] ? left + 1 : left;     //获取较大左右孩子的下标
					largest = arr[largest] > arr[index] ? largest : index;
					if(largest == index) break;
					swap(arr,largest,index);
					index = largest;                    //更新index，使之等于孩子结点，继续往下维护大根堆
					left = index * 2 + 1;
				}
			}

			//初始化大根堆，保证堆顶从上往下都为递减趋势
			public static void heapInsert(int[] arr, int index) {
				while (arr[index] > arr[(index - 1) / 2]) {           //当前节点比父节点大，则交换，并继续往上进行判断
					swap(arr, index, (index - 1) / 2);
					index = (index - 1) / 2;
				}
			}




2. 堆排序扩展



	已知一个几乎有序的数组，几乎有序是指，如果把数组排好顺序的话，每个元素移动的距离可以不超过k，并且k相对于数组来说比较小。

	请选择一个合适的排序算法针对这个数据进行排序。



	思路： 采用小根堆

	1. 初始化k个数字放入数组中
	2. 每次从小根堆中弹出一个最小值，放入有序数组中
	3. 加入新的值进入小根堆中，重复此步骤，最后将堆中所有元素有序加入数组





    public static void sortedArrDistanceLessK(int[]arr,int k){
        PriorityQueue<Integer> heap = new PriorityQueue<>();
        int index = 0;
        while(index < k){                   //首先将 K 个数字添加到小根堆中
            heap.add(arr[index++]);
        }
        int i = 0;
        while(index < arr.length){          //每次从小根堆中得到最小值，放入有序数组中，并加入新的值进入小根堆中
            heap.add(index++);
            arr[i++] = heap.poll();
        }
        while(!heap.isEmpty()){             //最后将小根堆中所有值有序存入数组
            arr[i++] = heap.poll();
        }
    }









3. Comparator 比较器的使用


		1）比较器的实质就是重载比较运算符

		2）比较器可以很好的应用在特殊标准的排序上

		3）比较器可以很好的应用在根据特殊标准排序的结构上





		//返回负数，第一个参数排前面	即 o1 < o2
		//返回正数，第二个参数排前面	即 o1 > o2
		//返回0，都可以


		public void compare(Object o1,Object o2){

			return o1-o2

		}






4.基数排序


		maxbit		计算当前数组中的最大 位数
		getDigit	传入数字，返回第 d 位上的数字


		1. 利用数组count统计，某个位上的数字总数
		2. 计算前缀和，表示前面有多少个数字小于等于当前数，用于出桶时，确定元素位置
		3. 从右往左遍历，出桶操作，利用前缀和 和 计数操作确定元素位置
		4. 赋值给arr，进行下一次基数排序





		private static void radixSort(int[] arr, int begin, int end, int digit) {
			final int radix = 10;
			int i = 0,j = 0;
			int[] bucket = new int[end - begin +1];

			for (int d = 1; d <= digit; d++) {              //基数排序外层总次数
				int[]count = new int[radix];

				for(i = begin;i <= end;i++){
					j = getDigit(arr[i],d);
					count[j]++;                             //利用数组count统计，某个位上的数字总数
				}

				for(i = 1;i < radix;++i){
					count[i] = count[i] + count[i-1];       //计算前缀和，表示前面有多少个数字小于等于当前数，用于出桶时，确定元素位置
				}

				for(i = end;i >= begin;i--){
					j = getDigit(arr[i],d);
					bucket[count[j]-1] = arr[i];            //从右往左遍历，出桶操作，利用前缀和 和 计数操作确定元素位置
					count[j]--;
				}
				for(i = begin,j=0;i <= end;i++,j++){        //赋值给arr，进行下一次基数排序
					arr[i] = bucket[j];
				}
			}
		}


		//计算当前数组中的最大 位数
		private static int maxbit(int[] arr) {
			int max = Integer.MIN_VALUE;
			for (int i = 0; i < arr.length; i++) {
				max = Math.max(arr[i],max);
			}
			int res = 0;
			while(max != 0){
				res++;
				max /= 10;
			}
			return res;
		}


		//传入数字，返回第 d 位上的数字
		public static int getDigit(int x, int d) {
			return ((x / ((int) Math.pow(10, d - 1))) % 10);			//先除以 x 舍去后面部分，在整除 10 获得最后一位
		}








5. 桶排序思想下的排序

	1）计数排序

	2）基数排序



	分析：
		1)桶排序思想下的排序都是不基于比较的排序

		2)时间复杂度为O(N)，额外空间负载度O(M)

		3)应用范围有限，需要样本的数据状况满足桶的划分

